ノート




5/18 済
記事の画像を複数枚表示できるようにしたい。
結果:
https://github.com/sayyam/carouselviewを利用してカルーセル機能を導入した


5/18
記事作成時にかなり時間がかかるのでクルクルを実装したい


5/18
記事作成者のフィードバックや出品物を見れるように実装したい


5/18 済
取引相手が決まってしまった記事については何らかの表示をしたい

改善案:
画像をGrayScaleにして表示。
そのためにはmasterfragmentでdeadlineを取得できるようになってなければならない。

結果:
colorMatrixを使ってgrayscaleを作成し、imageViewにセットした
deadlineがfalseの場合にはタイトルはBoldで表示することで更に見分けやすくした。



5/18
MasterFragmentのonResumeでデータを受け取るんじゃなくて、スクロールでデータ更新できるようにしたい。



5/7
djangoに通知機能を実装したい
通知を投げる相手は、avisoのmodels.pyにかかれているシグナル部分

aviso.modelsでスマホどうかを判断することができない問題があるので
apiの各ビューで実装する仕組みで対応しようと思う。



5/7 済
faborite_app 作成する

改善案:
Djangoのfavoriteアプリを作成する。これは気に入った記事にマークを付けるものである。
Favorite(models.Model)の属性
users = models.ManyToManyField(User)
create_at = models.DateTimeField()

Item(models.Model)にfavorite(null=True)フィールドを追加する

シグナルでfavoriteボタンを押したらシグナルで記事作成者に通知する仕組みを実装したい。



5/7 済
記事作成時にタイトルの文字数に制限がある。現在は45文字に設定してある。これについて良くしたい

改善案:
入力文字数によって 12/45みたいな感じで表現する
45文字以上の入力に対してバリデーションで送信できない旨を表示する

結果:
文字数制限のみ行った。
editTextにmaxLengthの属性値を付すだけで制限する事ができると分かった。




5/7 済
記事作成時にタイトルを改行表示できるようにしたい

textMultilineをtrueに変更した


5/5 済
ログイン画面ではじめてログインデータをとるのではなくて、起動時にログイン関係のデータを扱うのはどうか？
まあつまり常時データとしてログインデータを扱う変更を行うのはどうか？

なぜそんなことを考えるようになったのか？

まずログイン機能に問題がある。
サインアウトを実行したらSharedPreferencesにログアウト状態を記録する。
そして変数にログアウト状態をもたせる。この変数によってサイドバーのメニューを隠したりするため。
次にログインの仕組みをどうするか？
SharedPreferencesからログイン状態を取得する。ログイン状態がTrueであればログインを実行する必要がない。
その前にAUTHTOKENのチェックを実施する。AUTHTOKENを使って通信させる。
ログイン状態がfalseであれば、ログインを実行する必要がある。
まずBasic Authで手続きさせる。




5/5 済
問題点：通知メニューが真っ白になってバッテリー残高を見ることができない

処理と結果報告
https://minpro.net/status-bar-whiteを実施。改善した。
困ったらstylesファイルを見るようする教訓を得た。



5/5 済
ユーザープロフィールデータ一覧をもっと良くしたい

改善点
コンテンツが端から始まっているので少し空間をあけたい
コンテンツとコンテンツの間をグレーで区切ると分かりやすい


処理結果報告
グレーで区切る件:dividerViewで基本各30dpで区切ることを実施 (Gray200)
コンテンツスタートの件: paddingLeftで左端から＊＊dpずらすことに成功した。またstartTextとして定数を決めた。なおdimensで決めないと行けない模様。




5/5
ログイン画面にパスワードを忘れた場合の部分を実装したい

計画





5/5
データ通信時にはクルクル回すアニメーションを表示したい




5/4 済
記事作成時に開かれるスピナーの初期値がユーザーのデータにセットされていない->セットする

記事作成時にはすでにログインしていることが確定しているので、ログインしているデータを使うことができないか？

考察
ユーザーデータは常に使われるデータなので常時保持しておくデータとする。
現状ではプロフィールデータ参照時にユーザーデータを初めて取得する仕組みになっているのでログイン時またはユーザー登録時に取得する。
また常時使うデータとして何かクラスオブジェクトを保持する。バラバラのデータを避ける。

ログイン-> 成功-> profileObjを取得
ユーザー登録-> success-> エリア設定-> profileObjを取得




5/4 済
基本的に入力するとキーボードがいろいろなフォームの上をかぶさってしまうのでかぶさらないようにしたい

調査結果
ジモティを触ってみたところ入力フォームのある画面にスクロールビューが実装されていた。
これで下のフォームを引っ張るとキーボード表示を消去することができたのでこの方法を採用する。

処理結果
ユーザー登録画面を改善
ログイン画面を改善




5/4 済
ユーザー登録完了 -> エリア設定画面で画面上部がプロフィールになっているので取引エリア設定に変更する

タイトルバーを変更する。
Activityにタイトルバー編集ロジックがあると思われるのでIntentKey,Fragmentタグに応じてタイトルバーを変更する

調査結果
supportActionBar?.title = "取引エリア設定"という形で変更できることを確認した。



5/4 済
ユーザー登録の完了 -> Profileオブジェクトの生成

これはProfileオブジェクトが無いとアイテム詳細データを見ることができなくなるからだ。
デフォルトでQuezartenango, xelaで登録しておいて、
エリア変更のフラグメントを起動して修正を促すコードを作成する。


必要なこと
Djangoでユーザー登録が終わった時にシグナルでProfileオブジェクトを生成する。
Userクラスをpost_saveメソッドを実行してcreate=Trueを帰す場合にシグナルを実行する。

Androidでユーザー登録が成功に終わったとき、Areaセッティングのフラグメントを起動する。


5/4 済
ユーザー登録画面にFABがあるので削除したい。

処理
画面からFABのViewを削除する
SignUpActivityからFABのロジック部分を削除する。

